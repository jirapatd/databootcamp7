## Basic knowledge programming
# 1. Variable
# 2. Data types 
# 3. Data structure
# 4. Control flow
# 5. function
## R is sensitive case


## 1.Crate Variable
income <- 28000
expense <- 19500
saving <- income - expense

## Remove Variable
rm(income)
rm(expense)
rm(saving)

new_income <- 80000 ## if you declare to the same variable, the new value will overwrite to old one

## 2. Data types
## Numeric , Character(text) , Date , Logical(TRUE,FALSE)

my_age <- 20
my_name <- "XX"  # it can't be start with number
movie_lover <- TRUE

class(my_age)
class(my_name)
class(movie_lover)

is.numeric(my_age)
is.character(my_name)
is.logical(movie_lover)

wantee <- "2023-02-04"
wantee <- as.Date(wantee)

## 3. Data Structure
## Vector
## Matrix
## List
## Data Frame

#Vector (It can collect only same data types)
friends <- c("A" , "B" , "C" , "D" , "E")
length(friends)
friends[c(1,3,5)]
friends[2:4]
friends[1] <- "F" ## change value in vector
friends[2:3] <- c("H" , "I") ## change multiple value in vector

#Matrix (It can collect only same data types)
m <- matrix(1:10, ncol=2)
s <- seq(5,100,5)
m2 <- matrix(1:20, ncol=5, byrow=TRUE)
m3 <- m*2
m4 <- m*m3

y <- 1:6
dim(y) <- c(3,2)

#List (It can collect several data types / objects)
# key = value

my_playlist <- list(
  fav_movie = c("The dark knight","Iron Man","Harry Potter"),
  fav_song = c("Hype boy","OMG","Attention"),
  fav_artist = "NewJean",
  year = 2000,
  movie_lover = TRUE,
  my_fav_matrix = matrix(1:100,NCOL=50)
)

#Subset
my_playlist$fav_movie
my_playlist$fav_song
my_playlist$fav_artist
my_playlist[1]
my_playlist[[1]]
my_playlist$fav_song[2]
my_playlist[[2]][2]

##Customer database for our company

customer_01 <- list(
  name = "Fred",
  location = "Hogwart",
  age = 17,
  movies = c("Jonh Wick" , "Dark Knight")
)

customer_02 <- list(
  name = "Jinny",
  lname = "Weasley",
  location = "Tree house",
  age = 16,
  movies = "John Wick 4",
  fav_weapon = "Elder Wand"
)

customer_db <- list(
  Fred = customer_01,
  Jinny = customer_02
)


## Data Frame
friend <- c("a","b","c","d","e") #Argument 1
ages <- c(20,21,20,22,23) #Argument 2
movie_lover <- c(F,T,T,T,F) #Argument 3
df <- data.frame(id = 1:5 ,friend,ages,movie_lover) ## Argument value must be the same length
View(df)

customer <- list(
  friends <- c("john","david",NA),
  ages <- c(14,15,17),
  movie <- c(T,T,F)
)
df2 <- data.frame(customer)
View(df2)
sum(is.na(friends)) # Sum to find NA (NA = Null)


## Subset dataframe
df$friend
df$ages
df$movie_lover
df[ , 2:3]
df[ , 3:4]
df[1:3, ]
df[ , c(1,3)]
df[ , c("id","friend")]

## Function
add_two_nums <- function(v1,v2) {
  return(v1+v2)
}

cube <- function(x) {
  return(x^3)
}

cube2 <- function(x) x**3
cube2(3)

my_power <- function(base,pow) base^pow #base,pow = parameters / 3,3 arguments
my_power(3,3)

my_power2<- function(base,pow) {
  return(base^pow)
}
my_power2(3,2)

geeting_bot <- function() {
  username <- readline("What's your name: ")
  print(paste("Hello" , username))
  your_age <- as.numeric(readline("How old are you: "))
  print(paste("You are" , your_age , "years old."))
}

geeting_bot()

##control flow if , for , while

#if
score <- 50
if(score >= 80) {
  print("passed")
} else if (score >= 50) {
  print("Just OK")
} else{
  print("Retake the exam")
}

#if+function
grade_cal <- function(score){
  if(score >= 80) {
    print("passed")
  } else if (score >= 50) {
    print("Just OK")
  } else{
    print("Retake the exam")
  }
}

#while loop

count <- 0 

while (count < 5) {
  print("xx")
  count <- count+1
}
